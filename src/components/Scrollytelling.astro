---
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import type { LayerGroup } from "@types";
import fs from "fs";
import yaml from "js-yaml";

// Load and parse the YAML file
const fileContents = fs.readFileSync(
  "src/pages/_scrollytelling_steps.yaml",
  "utf8"
);
interface MapStep {
  title: string;
  description: string;
  center: [number, number];
  zoom: number;
  pitch?: number;
  bearing?: number;
  media?: string;
  position?: "left" | "right" | "centered" | "full";
  layers?: LayerGroup[];
  persist?: boolean;
  mapAnimation?: "flyTo" | "easeTo" | "jumpTo";
  rotateAnimation?: boolean;
}

const mapData: MapStep[] = yaml.load(fileContents) as MapStep[];

export interface Props {
  latitude: number;
  longitude: number;
  zoom: number;
  mapstyle: string;
  container: string;

  /** If `false`, the map will not respond to interaction.  This is a static map built with the full web map rendering API. */
  interactive?: boolean;
  containerstyle?: string;
  pitch?: number;
  bearing?: number;
  layers?: LayerGroup[];
  mapAnimation?: "flyTo" | "easeTo" | "jumpTo";
  rotateAnimation?: boolean;
}

const {
  latitude,
  longitude,
  zoom,
  mapstyle,
  container,
  interactive,
  containerstyle = "height: 61.8vh",
  pitch,
  bearing,
  layers,
  mapAnimation,
  rotateAnimation,
} = Astro.props;
const layersJson = layers ? JSON.stringify(layers) : undefined;
---

<div class="scrollytelling-container">
  <!-- Map Container -->
  <div
    id={container}
    class="maplibre-scrollytelling map-container"
    style={{ width: "100vw", height: "100vh" }}
  >
    <maplibre-map
      data-latitude={latitude}
      data-longitude={longitude}
      data-zoom={zoom}
      data-mapstyle={mapstyle}
      data-container={container}
      data-interactive={interactive}
      data-containerstyle={containerstyle}
      data-pitch={pitch}
      data-bearing={bearing}
      data-layers={layersJson}
      data-map-animation={mapAnimation}
      data-map-rotate-animation={rotateAnimation}
    >
      <link
        rel="stylesheet"
        href="https://unpkg.com/maplibre-gl/dist/maplibre-gl.css"
      />
      <script>
        import maplibregl from "maplibre-gl";
        import type {
          GeoJSONFeatureLayer,
          RasterLayer,
          ImageLayer,
          VectorTileLayer,
        } from "@types";
        import type { LngLatLike } from "maplibre-gl";
        import { loadMapLayers } from "@lib/utils";
        class MapLibreScrollytellingMap extends HTMLElement {
          constructor() {
            super();
            var map = new maplibregl.Map({
              container: this.dataset.container || "maplibre-map",
              interactive: this.dataset.interactive
                ? JSON.parse(this.dataset.interactive)
                : false,
              center: [
                this.dataset.longitude ? parseFloat(this.dataset.longitude) : 0,
                this.dataset.latitude ? parseFloat(this.dataset.latitude) : 0,
              ],
              zoom: this.dataset.zoom
                ? parseFloat(this.dataset.zoom)
                : undefined,
              style: this.dataset.mapstyle,
            });

            map.on("load", () => {
              const sections = document.querySelectorAll("section");

              const observer = new IntersectionObserver(
                (entries) => {
                  entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                      entry.target.classList.add("active");

                      const centerAttr =
                        entry.target.getAttribute("data-center");
                      const center = centerAttr
                        ? JSON.parse(centerAttr)
                        : undefined;
                      const zoom = entry.target.getAttribute("data-zoom");
                      const pitch = entry.target.getAttribute("data-pitch");
                      const bearing = entry.target.getAttribute("data-bearing");

                      // parse layers
                      const layersAttr =
                        entry.target.getAttribute("data-layers");
                      const layers = layersAttr
                        ? JSON.parse(layersAttr)
                        : undefined;
                      if (layers) {
                        loadMapLayers(map, layers, true);
                      }

                      // Update map position via animation type if specified
                      map[
                        (entry.target.getAttribute("data-map-animation") as
                          | "flyTo"
                          | "easeTo"
                          | "jumpTo") ?? "flyTo"
                      ]({
                        center: center as LngLatLike,
                        zoom: zoom ? parseFloat(zoom) : undefined,
                        pitch: pitch ? parseFloat(pitch) : undefined,
                        bearing: bearing ? parseFloat(bearing) : undefined,
                        essential: true,
                      });

                      const rotateAnimation =
                        entry.target.getAttribute(
                          "data-map-rotate-animation"
                        ) === "true";
                      
                      if (rotateAnimation === true) {
                        map.once("moveend", () => {
                          map.rotateTo(map.getBearing() + 180, {
                            duration: 30000,
                            easing: (t: number) => t,
                          });
                        });
                      } 
                    } else {
                      if (!entry.target.getAttribute("data-persist")) {
                        // Remove the active class from the section
                        entry.target.classList.remove("active");

                        // Remove the layers from the map
                        const layersAttr =
                          entry.target.getAttribute("data-layers");
                        const layers = layersAttr
                          ? JSON.parse(layersAttr)
                          : undefined;
                        if (layers) {
                          layers.forEach(
                            (
                              layer:
                                | GeoJSONFeatureLayer
                                | RasterLayer
                                | ImageLayer
                                | VectorTileLayer
                            ) => {
                              if (map.getLayer(layer.id)) {
                                map.removeLayer(layer.id);
                              }
                              if (map.getSource(layer.id)) {
                                map.removeSource(layer.id);
                              }
                            }
                          );
                        }
                      }
                    }
                  });
                },
                { threshold: 0.5 }
              );

              sections.forEach((section) => observer.observe(section));
            });
          }
        }

        window.customElements.define("maplibre-map", MapLibreScrollytellingMap);
      </script>
    </maplibre-map>
  </div>

  <!-- Scrolling Content -->
  <main>
    {
      mapData.map((step, index) => (
        <section
          id={`section-${index}`}
          data-center={JSON.stringify(step.center)}
          data-zoom={step.zoom}
          data-pitch={step.pitch}
          data-bearing={step.bearing}
          data-layers={JSON.stringify(step.layers)}
          data-map-animation={step.mapAnimation}
          data-map-rotate-animation={
            step.rotateAnimation === true ? "true" : "false"
          }
          class:list={[step.position ? step.position : "lefty", "step"]}
        >
          <div class="step-content">
            <h2>{step.title}</h2>
            <p>{step.description}</p>
            {step.media ? <img src={step.media} alt={step.title} /> : null}
          </div>
        </section>
      ))
    }
  </main>
</div>
