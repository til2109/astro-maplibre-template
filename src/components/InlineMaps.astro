---
import fs from "fs";
import yaml from "js-yaml";
import type { ContentBlock, MapBlock, MixedBlock } from "@types";
import { default as Map } from "../components/Map.astro";
import { default as Content } from "../components/InlineContent.astro";
// Load and parse the YAML file
const fileContents = fs.readFileSync(
  "src/pages/_inline_map_components.yaml",
  "utf8"
);
const pageData = yaml.load(fileContents) as { blocks: ContentBlock[] };

const { blocks } = pageData;

export interface Props {
  blocks: ContentBlock[];
}
---

<div class="inline-maps-container">
  <main>
    {
      blocks.map((block, index) => {
        if (block.type == "map") {
          return (
            <div id={`${block.type}-${index}`} class="inline-map">
              <Map id={block.id? block.id : undefined} classList={block.classList? block.classList :undefined} block={block.content as MapBlock} />
            </div>
          );
        } else if (block.type == "content") {
          return (
            <div id={`${block.type}-${index}`} class="inline-mixed">
              <Content id={block.id? block.id : undefined} classList={block.classList? block.classList :undefined} block={block.content as MixedBlock} />
            </div>
          );
        } else if (block.type == "mixed") {
          return (
            <div id={`${block.type}-${index}`} class={block.classList? block.classList + " inline-multiple" : "inline-multiple"}>
              {
                Array.isArray(block.content) ? 
                 (block.content.map((content, index) => {
                    if (content.type == "map") {
                      return (
                        <div id={`${content.type}-${index}`} class="inline-map">
                          <Map id={content.id? content.id : undefined} classList={content.classList? content.classList :undefined} block={content.content as MapBlock} />
                        </div>
                      );
                    } else if (content.type == "content") {
                      return (
                        <div id={`${content.type}-${index}`} class="inline-mixed">
                          <Content id={content.id? content.id : undefined} classList={content.classList? content.classList :undefined} block={content.content as MixedBlock} />
                        </div>
                      );
                    }
                  })) : null
                }              
            </div>
          );
        }
      })
    }
  </main>
</div>

