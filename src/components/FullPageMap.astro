---
import fs from "fs";
import yaml from "js-yaml";
import type { LayerGroup } from "@types";
// Load and parse the YAML file
const fileContents = fs.readFileSync(
  "src/pages/_full_page_map_components.yaml",
  "utf8"
);
export interface Props {
  latitude: number;
  longitude: number;
  zoom: number;
  mapstyle: string;
  container: string;

  /** If `false`, the map will not respond to interaction.  This is a static map built with the full web map rendering API. */
  interactive?: boolean;
  containerstyle?: string;
  pitch?: number;
  bearing?: number;
}

const layers: LayerGroup[] = yaml.load(fileContents) as LayerGroup[];

const {
  latitude,
  longitude,
  zoom,
  mapstyle,
  container,
  interactive,
  containerstyle = "height: 61.8vh",
  pitch,
  bearing,
} = Astro.props;
---

<div class="full-page-map-container">
  <!-- Map Container -->
  <div
    id={container}
    class="maplibre-inline map-container"
    style={{ width: "100vw", height: "100vh" }}
  >
    <nav id={`${container}-menu`} class="menu"></nav>
    <div class="map-overlay" id={`${container}-legend`} style="display:none"></div>
    <maplibre-fullpage-map
      data-latitude={latitude}
      data-longitude={longitude}
      data-zoom={zoom}
      data-mapstyle={mapstyle}
      data-container={container}
      data-interactive={interactive}
      data-containerstyle={containerstyle}
      data-pitch={pitch}
      data-bearing={bearing}
      data-layers={JSON.stringify(layers)}
    >
      <link
        rel="stylesheet"
        href="https://unpkg.com/maplibre-gl/dist/maplibre-gl.css"
      />
      <script>
        import maplibregl from "maplibre-gl";
        import { loadMapLayers } from "@lib/utils";
        import type {
          GeoJSONFeatureLayer,
          ImageLayer,
          RasterLayer,
          VectorTileLayer,
        } from "@types";
        class MapLibreFullPageMap extends HTMLElement {
          constructor() {
            super();

            const map = new maplibregl.Map({
              container: this.dataset.container || "maplibre-map",
              interactive: this.dataset.interactive
                ? JSON.parse(this.dataset.interactive)
                : false,
              center: [
                this.dataset.longitude ? parseFloat(this.dataset.longitude) : 0,
                this.dataset.latitude ? parseFloat(this.dataset.latitude) : 0,
              ],
              zoom: this.dataset.zoom
                ? parseFloat(this.dataset.zoom)
                : undefined,
              style: this.dataset.mapstyle,
            });

            map.on("load", () => {
              // Add layers
              const layers = this.dataset.layers
                ? JSON.parse(this.dataset.layers)
                : undefined;
              if (layers) {
                loadMapLayers(map, layers);

                // add legend if layers have legend items
                if (
                  layers.some(
                    (
                      layer:
                        | GeoJSONFeatureLayer
                        | RasterLayer
                        | ImageLayer
                        | VectorTileLayer
                    ) =>
                      layer.legend &&
                      !Array.isArray(layer.legend) &&
                      layer.legend.items.length > 0
                  )
                ) {
                  const menu = document.getElementById(
                    `${this.dataset.container}-legend`
                  );
                  if (menu) {
                    menu.innerHTML = layers
                      .map(
                        (
                          layer:
                            | GeoJSONFeatureLayer
                            | RasterLayer
                            | ImageLayer
                            | VectorTileLayer
                        ) =>
                          layer.legend &&
                          !Array.isArray(layer.legend) && layer.legend.items.length > 0 &&
                          `<div class="menu-item">
                            ${layer.legend.title ? `<h3>${layer.legend.title}</h3>` : ""}
                            <ul>
                              ${layer.legend.items
                                .map(
                                  (item) =>
                                    `<li>
                                      <span class="legend-color" style="background-color: ${item.color}"></span>
                                      <span class="legend-label">${item.label}</span>
                                    </li>`
                                )
                                .join("")}
                            </ul>
                          </div>`
                      )
                      .join("");
                    
                    menu.style.display = "block";

                  }
                } 
              }
            });
          }
        }

        window.customElements.define(
          "maplibre-fullpage-map",
          MapLibreFullPageMap
        );
      </script>
    </maplibre-fullpage-map>
  </div>
</div>
